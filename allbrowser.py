from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import (TimeoutException, 
                                      NoSuchElementException, 
                                      WebDriverException,
                                      InvalidSessionIdException,
                                      StaleElementReferenceException)
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.firefox import GeckoDriverManager
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.microsoft import EdgeChromiumDriverManager
import random
import datetime
import time
import json
import os
import re
import requests
import getpass
import socket
import uuid
import sys
import msvcrt
import threading

class UserIdentity:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    def __init__(self):
        self.user_id = self._get_user_id()
        self.device_id = self._get_device_id()
        self.username = getpass.getuser()
        self.hostname = socket.gethostname()
        
    def _get_user_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if os.path.exists('user_config.json'):
                with open('user_config.json', 'r') as f:
                    config = json.load(f)
                    return config.get('user_id', str(uuid.uuid4()))
        except Exception:
            pass
        return str(uuid.uuid4())
    
    def _get_device_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            mac = uuid.getnode()
            return str(mac)
        except Exception:
            return str(uuid.uuid4())
    
    def save_user_id(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç user_id –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('user_config.json', 'w') as f:
                json.dump({'user_id': self.user_id}, f)
        except Exception:
            pass

class TelegramNotifier:
    def __init__(self, token, chat_id, user_identity):
        self.token = token
        self.chat_id = chat_id
        self.user_identity = user_identity
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.session = requests.Session()
        
    def _make_request(self, method, params=None, files=None, timeout=30, max_retries=3):
        for attempt in range(max_retries):
            try:
                url = f"{self.base_url}/{method}"
                if files:
                    response = self.session.post(url, files=files, data=params, timeout=timeout)
                else:
                    response = self.session.post(url, json=params, timeout=timeout)
                response.raise_for_status()
                return response.json()
            except requests.exceptions.RequestException as e:
                if attempt == max_retries - 1:
                    print(f"Telegram API final error after {max_retries} attempts: {str(e)}")
                    return None
                sleep(2 ** (attempt + 1))
                
    def send_message(self, text, disable_notification=False):
        user_info = (
            f"\nüë§ User: {self.user_identity.username}@{self.user_identity.hostname}\n"
            f"üÜî ID: {self.user_identity.user_id[:8]}"
        )
        full_text = f"{text}{user_info}"
        
        params = {
            'chat_id': self.chat_id,
            'text': full_text,
            'parse_mode': 'HTML',
            'disable_notification': disable_notification,
            'disable_web_page_preview': True
        }
        return self._make_request('sendMessage', params)

class MangaReader:
    def __init__(self):
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_identity = UserIdentity()
        self.user_identity.save_user_id()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramNotifier –ø–µ—Ä–µ–¥ driver
        self.telegram = None
        try:
            if os.path.exists('config.json'):
                with open('config.json') as f:
                    config = json.load(f)
                self.telegram = TelegramNotifier(
                    config['telegram']['token'], 
                    config['telegram']['chat_id'], 
                    user_identity=self.user_identity
                )
                self.telegram.send_message("ü§ñ MangaBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {str(e)}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        self.driver = None
        self.initialize_driver()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state_file = f"manga_state_{self.user_identity.user_id[:8]}.json"
        self.current_page = 1
        self.current_manga = None
        self.current_volume = 1
        self.current_chapter = 1
        self.processed_chapters = set()
        self.login_attempts = 0
        self.max_login_attempts = 3
        self.last_error = None
        self.is_logged_in = False
        self.email = None
        self.password = None
        self.MAX_CATALOG_PAGES = 100
        self.reading_speed = 60
        self.user_interrupt = False
        self.switch_manga_flag = False

    def initialize_driver(self, browser_name="firefox"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –±—Ä–∞—É–∑–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if self.driver:
                try:
                    self.driver.quit()
                except Exception:
                    pass
            
            browser_name = browser_name.lower().strip()
            
            if browser_name == "firefox":
                firefox_options = FirefoxOptions()
                firefox_options.add_argument("--headless")
                firefox_options.add_argument("--disable-gpu")
                firefox_options.add_argument("--no-sandbox")
                firefox_options.add_argument("--disable-dev-shm-usage")
                service = webdriver.FirefoxService(GeckoDriverManager().install())
                self.driver = webdriver.Firefox(service=service, options=firefox_options)
                
            elif browser_name == "chrome":
                chrome_options = ChromeOptions()
                chrome_options.add_argument("--headless")
                chrome_options.add_argument("--disable-gpu")
                chrome_options.add_argument("--no-sandbox")
                chrome_options.add_argument("--disable-dev-shm-usage")
                service = webdriver.ChromeService(ChromeDriverManager().install())
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
                
            elif browser_name == "opera":
                opera_options = OperaOptions()
                opera_options.add_argument("--headless")
                opera_options.add_argument("--disable-gpu")
                opera_options.add_argument("--no-sandbox")
                opera_options.add_argument("--disable-dev-shm-usage")
                service = webdriver.ChromeService(OperaDriverManager().install())
                self.driver = webdriver.Chrome(service=service, options=opera_options)
                
            elif browser_name == "yandex":
                yandex_options = ChromeOptions()
                yandex_options.add_argument("--headless")
                yandex_options.add_argument("--disable-gpu")
                yandex_options.add_argument("--no-sandbox")
                yandex_options.add_argument("--disable-dev-shm-usage")
                if os.name == 'nt':
                    yandex_path = os.getenv('LOCALAPPDATA') + r'\Yandex\YandexBrowser\Application\browser.exe'
                else:
                    yandex_path = '/usr/bin/yandex-browser'
                yandex_options.binary_location = yandex_path
                service = webdriver.ChromeService(ChromeDriverManager().install())
                self.driver = webdriver.Chrome(service=service, options=yandex_options)
                
            elif browser_name == "edge":
                edge_options = ChromeOptions()
                edge_options.add_argument("--headless")
                edge_options.add_argument("--disable-gpu")
                edge_options.add_argument("--no-sandbox")
                edge_options.add_argument("--disable-dev-shm-usage")
                service = webdriver.EdgeService(EdgeChromiumDriverManager().install())
                self.driver = webdriver.Edge(service=service, options=edge_options)
                
            else:
                raise ValueError(f"Unsupported browser: {browser_name}")
            
            self.driver.set_page_load_timeout(90)
            self.wait = WebDriverWait(self.driver, 45)
            return True
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {str(e)}"
            print(error_msg)
            if hasattr(self, 'telegram') and self.telegram:
                self.telegram.send_message(error_msg)
            return False

    def get_credentials(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("=== –í–í–û–î –î–ê–ù–ù–´–• ===")
        email = input("Email: ").strip()
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        print("Password: ", end='', flush=True)
        password = ''
        
        if sys.platform == 'win32':
            # –î–ª—è Windows
            while True:
                ch = msvcrt.getch()
                if ch in (b'\r', b'\n'):
                    print()
                    break
                elif ch == b'\x08':
                    if len(password) > 0:
                        password = password[:-1]
                        print('\b \b', end='', flush=True)
                else:
                    password += ch.decode('utf-8')
                    print('*', end='', flush=True)
        else:
            # –î–ª—è Linux/MacOS
            import termios
            import tty
            fd = sys.stdin.fileno()
            old_settings = termios.tcgetattr(fd)
            try:
                tty.setraw(sys.stdin.fileno())
                while True:
                    ch = sys.stdin.read(1)
                    if ch in ('\r', '\n'):
                        print()
                        break
                    elif ch == '\x7f':  # Backspace
                        if len(password) > 0:
                            password = password[:-1]
                            print('\b \b', end='', flush=True)
                    else:
                        password += ch
                        print('*', end='', flush=True)
            finally:
                termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        
        return email, password

    def load_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.state_file):
            try:
                with open(self.state_file, "r", encoding='utf-8') as f:
                    state = json.load(f)
                    self.current_page = state.get("current_page", 1)
                    self.current_manga = state.get("current_manga")
                    self.current_volume = state.get("current_volume", 1)
                    self.current_chapter = state.get("current_chapter", 1)
                    self.processed_chapters = set(state.get("processed_chapters", []))
                    return True
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}", is_error=True)
        return False

    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        state = {
            "current_page": self.current_page,
            "current_manga": self.current_manga,
            "current_volume": self.current_volume,
            "current_chapter": self.current_chapter,
            "processed_chapters": list(self.processed_chapters)
        }
        try:
            with open(self.state_file, "w", encoding='utf-8') as f:
                json.dump(state, f, indent=2)
            return True
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}", is_error=True)
            return False

    def log_message(self, message, is_error=False):
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        user_prefix = f"[USER:{self.user_identity.user_id[:8]}]"
        log_entry = f"{user_prefix}[{timestamp}] {message}\n"
        
        with open("manga_bot_log.txt", "a", encoding='utf-8') as log_file:
            log_file.write(log_entry)
        
        print(f"{user_prefix} {message}")
        
        if is_error:
            self.last_error = message[:500]
            if hasattr(self, 'telegram') and self.telegram:
                try:
                    error_message = (
                        f"üö® <b>MangaBot Error</b>\n"
                        f"<pre>{message[:4000]}</pre>\n"
                        f"üìö –ú–∞–Ω–≥–∞: {self.current_manga or '–ù–µ—Ç'}\n"
                        f"üìñ –¢–æ–º/–ì–ª–∞–≤–∞: {self.current_volume}/{self.current_chapter}"
                    )
                    self.telegram.send_message(
                        error_message,
                        disable_notification=not is_error
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram: {str(e)}")

    def safe_get(self, url, retries=3):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
        for attempt in range(retries):
            try:
                try:
                    _ = self.driver.current_url
                except (WebDriverException, InvalidSessionIdException):
                    self.log_message("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...", is_error=True)
                    if not self.initialize_driver():
                        raise
                
                self.driver.set_page_load_timeout(90)
                self.driver.get(url)
                self.wait.until(lambda d: d.execute_script("return document.readyState") == "complete")
                return True
            except (TimeoutException, WebDriverException, InvalidSessionIdException) as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ({attempt+1}/{retries}): {str(e)[:100]}"
                self.log_message(error_msg, is_error=True)
                
                if attempt == retries - 1:
                    self.save_debug_info("page_load_failed")
                    raise
                
                if "Tried to run command without establishing a connection" in str(e):
                    if not self.initialize_driver():
                        raise
                
                sleep(5 * (attempt + 1))
        return False

    def check_login_state(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∞"""
        checks = [
            ("–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", ".user-avatar"),
            ("–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", ".user-menu"),
            ("–ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞", "//*[contains(text(), '–í—ã–π—Ç–∏')]"),
            ("URL –ø—Ä–æ—Ñ–∏–ª—è", lambda: "login" not in self.driver.current_url)
        ]
        
        for check_name, locator in checks:
            try:
                if callable(locator):
                    result = locator()
                else:
                    result = self.driver.find_elements(By.CSS_SELECTOR, locator) if '.' in locator else \
                            self.driver.find_elements(By.XPATH, locator)
                    result = bool(result)
                
                if result:
                    return True
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ '{check_name}': {str(e)[:100]}")
        
        return False

    def manual_login_assist(self):
        """–ü–æ–º–æ—â–Ω–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        self.log_message("=== –†–ï–ñ–ò–ú –†–£–ß–ù–û–ì–û –í–•–û–î–ê ===")
        if hasattr(self, 'telegram') and self.telegram:
            self.telegram.send_message(
                "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤—Ö–æ–¥ –≤ MangaBuff!\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ\n"
                "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç\n"
                "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
            )
        
        try:
            self.driver.quit()
        except Exception:
            pass
        
        firefox_options = FirefoxOptions()
        service = webdriver.FirefoxService(GeckoDriverManager().install())
        self.driver = webdriver.Firefox(service=service, options=firefox_options)
        
        try:
            self.driver.get("https://mangabuff.ru/login")
            input("–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å...")
            
            if self.check_login_state():
                self.log_message("–†—É—á–Ω–æ–π –≤—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
                if hasattr(self, 'telegram') and self.telegram:
                    self.telegram.send_message("‚úÖ –†—É—á–Ω–æ–π –≤—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                self.driver.quit()
                self.initialize_driver()
                return True
                
            self.log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", is_error=True)
            return False
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {str(e)}", is_error=True)
            return False

    def get_reading_speed(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è"""
        while True:
            try:
                speed = int(input("–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è (1-666 –≥–ª–∞–≤ –≤ —á–∞—Å): ").strip())
                if 1 <= speed <= 666:
                    if hasattr(self, 'telegram') and self.telegram:
                        self.telegram.send_message(f"‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è: {speed} –≥–ª–∞–≤/—á–∞—Å")
                    return speed
                print(f"–û—à–∏–±–∫–∞: —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 666 (–≤—ã –≤–≤–µ–ª–∏ {speed})")
            except ValueError:
                print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")

    def calculate_delay(self, speed):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –≥–ª–∞–≤–∞–º–∏"""
        return 3600 / speed

    def login(self, email, password):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç"""
        self.login_attempts += 1
        self.email = email
        self.password = password
        
        try:
            self.log_message(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ #{self.login_attempts}")
            if hasattr(self, 'telegram') and self.telegram:
                self.telegram.send_message(f"üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ #{self.login_attempts}...")
            
            self.driver.delete_all_cookies()
            
            if not self.safe_get("https://mangabuff.ru/login"):
                self.log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞", is_error=True)
                return False
            
            try:
                email_field = self.wait.until(
                    EC.presence_of_element_located((By.NAME, "email"))
                )
                pass_field = self.wait.until(
                    EC.presence_of_element_located((By.NAME, "password"))
                )
            except TimeoutException:
                self.log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", is_error=True)
                self.save_debug_info("login_fields_missing")
                return False
            
            email_field.clear()
            email_field.send_keys(email)
            
            pass_field.clear()
            pass_field.send_keys(password)
            
            try:
                login_btn = self.wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), '–í–æ–π—Ç–∏')]"))
                )
                login_btn.click()
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞: {str(e)}", is_error=True)
                self.save_debug_info("login_button_error")
                return False
            
            try:
                error_msg = self.wait.until(
                    EC.presence_of_element_located((By.XPATH, "//*[contains(text(), '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')]"))
                )
                if error_msg:
                    self.log_message("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å", is_error=True)
                    if hasattr(self, 'telegram') and self.telegram:
                        self.telegram.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")
                    return False
            except TimeoutException:
                if self.check_login_state():
                    self.log_message("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    self.is_logged_in = True
                    if hasattr(self, 'telegram') and self.telegram:
                        self.telegram.send_message("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    return True
                
                self.log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞", is_error=True)
                self.save_debug_info("login_ambiguous")
                return False
                
        except Exception as e:
            self.log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}", is_error=True)
            self.save_debug_info("login_crash")
            return False

    def get_manga_from_catalog(self, page=1):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞–Ω–≥–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞"""
        try:
            url = f"https://mangabuff.ru/manga?page={page}"
            if not self.safe_get(url):
                self.log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥", is_error=True)
                return None
            
            try:
                manga_cards = self.wait.until(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, "a.cards__item"))
                )
            except TimeoutException:
                self.log_message("–ö–∞—Ä—Ç–æ—á–∫–∏ –º–∞–Ω–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", is_error=True)
                return None
            
            manga_list = []
            for card in manga_cards:
                try:
                    href = card.get_attribute("href")
                    if href and '/manga/' in href:
                        manga_slug = href.split('/')[-1]
                        if manga_slug and manga_slug != 'manga':
                            manga_list.append(manga_slug)
                except Exception as e:
                    self.log_message(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {str(e)[:100]}", is_error=True)
                    continue
            
            return manga_list if manga_list else None
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {str(e)[:100]}", is_error=True)
            return None

    def get_chapters(self, manga_slug):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞–Ω–≥–∏"""
        try:
            url = f"https://mangabuff.ru/manga/{manga_slug}"
            if not self.safe_get(url):
                self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞–Ω–≥–∏ {manga_slug}", is_error=True)
                return None
            
            sleep(3)
            
            try:
                chapters = []
                chapter_elements = self.wait.until(
                    EC.presence_of_all_elements_located(
                        (By.CSS_SELECTOR, "a.chapter-item, a.chapter-link, [href*='/manga/']")
                    )
                )
                
                for elem in chapter_elements:
                    try:
                        href = elem.get_attribute("href")
                        if href and '/manga/' in href:
                            parts = href.split('/')
                            if len(parts) >= 5:
                                volume = int(parts[-2])
                                chapter = int(parts[-1])
                                chapters.append((volume, chapter))
                    except Exception:
                        continue
                
                chapters = sorted(list(set(chapters)), key=lambda x: (x[0], x[1]))
                
                if not chapters:
                    self.log_message("–ì–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–º 1 –≥–ª–∞–≤—É 1")
                    return [(1, 1)]
                
                return chapters
                
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–ª–∞–≤: {str(e)[:100]}", is_error=True)
                return [(1, 1)]
        except Exception:
            return [(1, 1)]

    def read_chapter(self, manga_slug, volume, chapter):
        """–ß–∏—Ç–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –≥–ª–∞–≤—É –º–∞–Ω–≥–∏ —Å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        chapter_key = f"{manga_slug}_{volume}_{chapter}"
        
        if chapter_key in self.processed_chapters:
            self.log_message(f"–ì–ª–∞–≤–∞ —Ç–æ–º {volume} –≥–ª–∞–≤–∞ {chapter} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö")
            return None
        
        try:
            url = f"https://mangabuff.ru/manga/{manga_slug}/{volume}/{chapter}"
            if not self.safe_get(url):
                self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤—É: —Ç–æ–º {volume} –≥–ª–∞–≤–∞ {chapter}", is_error=True)
                return None
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            try:
                self.wait.until(EC.presence_of_element_located(
                    (By.CSS_SELECTOR, ".reader-container, .reader, .manga-reader, .chapter-content, img")))
            except TimeoutException:
                try:
                    error_msg = self.driver.find_element(By.XPATH, 
                        "//*[contains(text(), '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞') or contains(text(), '—É–¥–∞–ª–µ–Ω–∞')]")
                    if error_msg:
                        self.log_message(f"–ì–ª–∞–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞: —Ç–æ–º {volume} –≥–ª–∞–≤–∞ {chapter}", is_error=True)
                        self.processed_chapters.add(chapter_key)
                        return None
                except NoSuchElementException:
                    self.log_message("–ö–æ–Ω—Ç–µ–Ω—Ç –≥–ª–∞–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
            try:
                favorite_btn = self.wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 
                        ".favourite-btn, .favorite-btn, [class*='favourite-btn'], [class*='favorite-btn']")))
                
                btn_classes = favorite_btn.get_attribute("class")
                is_active = "active" in btn_classes or "favourite-btn--active" in btn_classes
                
                if not is_active:
                    try:
                        self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", favorite_btn)
                        sleep(1)
                        
                        favorite_btn.click()
                        sleep(2)
                        
                        btn_classes = favorite_btn.get_attribute("class")
                        is_active_now = "active" in btn_classes or "favourite-btn--active" in btn_classes
                        
                        if not is_active_now:
                            self.log_message("–ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è!")
                            favorite_btn.click()
                            sleep(2)
                    except Exception as e:
                        self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)[:100]}", is_error=True)
                        return None
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º: {str(e)[:100]}", is_error=True)
                return None

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è
            try:
                total_height = int(self.driver.execute_script("return document.body.scrollHeight"))
                viewport_height = int(self.driver.execute_script("return window.innerHeight"))
                
                scroll_steps = random.randint(10, 20)
                step_size = total_height // scroll_steps
                
                for i in range(1, scroll_steps + 1):
                    if self.user_interrupt or self.switch_manga_flag:
                        return None
                        
                    scroll_pos = min(i * step_size, total_height - viewport_height)
                    self.driver.execute_script(f"window.scrollTo(0, {scroll_pos});")
                    sleep(random.uniform(0.5, 2.0))
                    
                    if random.random() < 0.3:
                        try:
                            body = self.driver.find_element(By.TAG_NAME, 'body')
                            ActionChains(self.driver).move_to_element(body).click().perform()
                        except Exception:
                            pass
                
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight)")
                sleep(3)
                
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)[:100]}", is_error=True)
                return None
            
            self.processed_chapters.add(chapter_key)
            self.log_message(f'–ì–ª–∞–≤–∞ —Ç–æ–º {volume} –≥–ª–∞–≤–∞ {chapter} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞')
            
            chapters = self.get_chapters(manga_slug)
            if chapters:
                try:
                    current_idx = chapters.index((volume, chapter))
                    if current_idx + 1 < len(chapters):
                        return chapters[current_idx + 1]
                except ValueError:
                    pass
            
            return None
            
        except Exception as e:
            self.log_message(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–∞–≤—ã: {str(e)[:100]}', is_error=True)
            
            if "Tried to run command without establishing a connection" in str(e):
                self.initialize_driver()
            
            return None

    def process_manga(self, manga_slug):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—é –º–∞–Ω–≥—É –¥–æ –∫–æ–Ω—Ü–∞"""
        self.log_message(f"–ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –º–∞–Ω–≥–∏: {manga_slug}")
        
        chapters = self.get_chapters(manga_slug)
        total_chapters = len(chapters) if chapters else 0
        
        if hasattr(self, 'telegram') and self.telegram:
            try:
                self.telegram.send_message(
                    f"üìö –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –º–∞–Ω–≥–∏: <b>{manga_slug}</b>\n"
                    f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {self.reading_speed} –≥–ª–∞–≤/—á–∞—Å"
                )
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}", is_error=True)
    
        read_count = 0
        
        while True:
            if self.user_interrupt or self.switch_manga_flag:
                self.log_message("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–Ω–≥–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                self.switch_manga_flag = False
                return False
                
            try:
                if not chapters:
                    chapters = self.get_chapters(manga_slug)
                    if not chapters:
                        self.log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤", is_error=True)
                        return False
                
                current_pos = (self.current_volume, self.current_chapter)
                if current_pos not in chapters:
                    self.current_volume, self.current_chapter = chapters[0]
                    self.save_state()
                
                for i in range(len(chapters)):
                    if self.user_interrupt or self.switch_manga_flag:
                        self.log_message("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–∞–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        self.switch_manga_flag = False
                        return False
                        
                    next_vol, next_ch = chapters[i]
                    
                    chapter_key = f"{manga_slug}_{next_vol}_{next_ch}"
                    if chapter_key in self.processed_chapters:
                        continue
                    
                    self.current_volume, self.current_chapter = next_vol, next_ch
                    self.save_state()
                    
                    result = self.read_chapter(manga_slug, next_vol, next_ch)
                    if result is not None:
                        read_count += 1
                    
                    if i < len(chapters) - 1:
                        delay = self.calculate_delay(self.reading_speed)
                        start_time = time.time()
                        while time.time() - start_time < delay:
                            if self.user_interrupt or self.switch_manga_flag:
                                self.log_message("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                                self.switch_manga_flag = False
                                return False
                            sleep(1)
            
                try:
                    updated_chapters = self.get_chapters(manga_slug)
                    if updated_chapters and len(updated_chapters) > len(chapters):
                        self.log_message(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –≥–ª–∞–≤—ã ({len(chapters)} -> {len(updated_chapters)})")
                        if hasattr(self, 'telegram') and self.telegram:
                            try:
                                self.telegram.send_message(
                                    f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –≥–ª–∞–≤—ã –¥–ª—è <b>{manga_slug}</b>!"
                                )
                            except Exception as e:
                                self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}", is_error=True)
                        chapters = updated_chapters
                        continue
                except Exception as e:
                    self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –≥–ª–∞–≤: {str(e)}", is_error=True)
                
                break
            
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —á—Ç–µ–Ω–∏—è –º–∞–Ω–≥–∏: {str(e)}", is_error=True)
                return False
        
        self.log_message(f"–ó–∞–∫–æ–Ω—á–∏–ª–∏ —á—Ç–µ–Ω–∏–µ –º–∞–Ω–≥–∏: {manga_slug} (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ –≥–ª–∞–≤: {read_count})")
        if hasattr(self, 'telegram') and self.telegram:
            try:
                self.telegram.send_message(
                    f"üèÅ –ó–∞–∫–æ–Ω—á–∏–ª–∏ —á—Ç–µ–Ω–∏–µ –º–∞–Ω–≥–∏: <b>{manga_slug}</b>\n"
                    f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –≥–ª–∞–≤: {read_count}"
                )
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}", is_error=True)
        return True

    def keyboard_listener(self):
        """–°–ª—É—à–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
        print("\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:")
        print("U - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –º–∞–Ω–≥—É")
        print("Q - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É\n")
        
        while not self.user_interrupt:
            if msvcrt.kbhit():
                key = msvcrt.getch().decode('utf-8').lower()
                if key == 'q':
                    self.user_interrupt = True
                    self.log_message("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
                    if hasattr(self, 'telegram') and self.telegram:
                        self.telegram.send_message("üõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
                elif key == 'u':
                    self.switch_manga_flag = True
                    self.log_message("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∞–Ω–≥–∏")
                    if hasattr(self, 'telegram') and self.telegram:
                        self.telegram.send_message("üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∞–Ω–≥–∏")

    def main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        max_page_attempts = 3
        page_attempts = 0
        
        keyboard_thread = threading.Thread(target=self.keyboard_listener, daemon=True)
        keyboard_thread.start()
        
        while not self.user_interrupt:
            try:
                if self.current_manga:
                    self.process_manga(self.current_manga)
                    self.current_manga = None
                    self.save_state()
                    continue
                
                manga_list = self.get_manga_from_catalog(self.current_page)
                
                if not manga_list:
                    page_attempts += 1
                    self.log_message(f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {self.current_page} –Ω–µ—Ç –º–∞–Ω–≥–∏. –ü–æ–ø—ã—Ç–∫–∞ {page_attempts}/{max_page_attempts}")
                    
                    if page_attempts >= max_page_attempts:
                        self.current_page = 1
                        page_attempts = 0
                        self.log_message("–°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞")
                    else:
                        if self.current_page < self.MAX_CATALOG_PAGES:
                            self.current_page += 1
                        else:
                            self.current_page = 1
                    
                    self.save_state()
                    continue
                
                page_attempts = 0
                
                self.current_manga = random.choice(manga_list)
                self.current_volume = 1
                self.current_chapter = 1
                self.save_state()
                
                if len(self.processed_chapters) % 10 == 0:
                    self.send_status_report()
                
            except Exception as e:
                self.log_message(f'–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)[:100]}', is_error=True)
                self.save_debug_info("main_loop_error")
                sleep(10)
                self.initialize_driver()

    def send_status_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ"""
        if not hasattr(self, 'telegram') or not self.telegram:
            return
            
        status = (
            f"üìä <b>MangaBot Status Report</b>\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è –º–∞–Ω–≥–∞: {self.current_manga or '–ù–µ—Ç'}\n"
            f"‚Ä¢ –¢–æ–º/–ì–ª–∞–≤–∞: {self.current_volume}/{self.current_chapter}\n"
            f"‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –≥–ª–∞–≤: {len(self.processed_chapters)}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {self.last_error or '–ù–µ—Ç'}"
        )
        
        try:
            self.telegram.send_message(status)
            
            screenshot_path = "debug/current_status.png"
            self.driver.save_screenshot(screenshot_path)
            self.telegram.send_photo(
                screenshot_path,
                caption="–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"
            )
            
            if os.path.exists("manga_bot_log.txt"):
                self.telegram.send_document(
                    "manga_bot_log.txt",
                    caption="–ü–æ–ª–Ω—ã–π –ª–æ–≥ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

    def save_debug_info(self, prefix=""):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            os.makedirs("debug", exist_ok=True)
            timestamp = int(time.time())
            
            screenshot_path = f"debug/{prefix}debug_{timestamp}.png"
            self.driver.save_screenshot(screenshot_path)
            
            page_source_path = f"debug/{prefix}page_source_{timestamp}.html"
            with open(page_source_path, "w", encoding="utf-8") as f:
                f.write(self.driver.page_source)
                
            cookies_path = f"debug/{prefix}cookies_{timestamp}.json"
            with open(cookies_path, "w") as f:
                json.dump(self.driver.get_cookies(), f)
                
            self.log_message(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {screenshot_path}")
            
            if hasattr(self, 'telegram') and self.telegram:
                caption = f"üêõ Debug: {prefix}{timestamp}"
                self.telegram.send_photo(
                    screenshot_path,
                    caption=caption
                )
                self.telegram.send_document(
                    page_source_path,
                    caption=caption
                )
                
            return True
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}", is_error=True)
            return False

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            self.log_message(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.user_identity.username}@{self.user_identity.hostname}")
            self.log_message(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.user_identity.user_id}")
            
            if self.load_state():
                self.log_message("–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                if hasattr(self, 'telegram') and self.telegram:
                    self.telegram.send_message("‚öô –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞")
            
            email, password = self.get_credentials()
            
            while self.login_attempts < self.max_login_attempts and not self.user_interrupt:
                if self.login(email, password):
                    break
                
                if self.login_attempts >= self.max_login_attempts:
                    self.log_message("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞", is_error=True)
                    return
            
            if not self.check_login_state():
                self.log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.", is_error=True)
                return
            
            self.reading_speed = self.get_reading_speed()
            self.log_message(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: {self.reading_speed} –≥–ª–∞–≤/—á–∞—Å")
            
            self.main_loop()

        except KeyboardInterrupt:
            self.log_message("\n–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            if hasattr(self, 'telegram') and self.telegram:
                self.telegram.send_message("‚è∏ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.save_state()
        except Exception as e:
            self.log_message(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}', is_error=True)
            self.save_state()
            
            if hasattr(self, 'telegram') and self.telegram:
                error_msg = (
                    f"üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!</b>\n"
                    f"<code>{str(e)[:4000]}</code>\n\n"
                    f"üìö –ú–∞–Ω–≥–∞: {self.current_manga or '–ù–µ—Ç'}\n"
                    f"üìñ –¢–æ–º/–ì–ª–∞–≤–∞: {self.current_volume}/{self.current_chapter}\n"
                    f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
                )
                self.telegram.send_message(error_msg)
        finally:
            try:
                self.user_interrupt = True
                if self.driver:
                    self.driver.quit()
                self.log_message("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                if hasattr(self, 'telegram') and self.telegram:
                    self.telegram.send_message("üõë –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç, —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}", is_error=True)

if __name__ == "__main__":
    if not os.path.exists("config.json"):
        config = {
            "telegram": {
                "token": "–í–ê–®_TELEGRAM_BOT_TOKEN",
                "chat_id": "–í–ê–®_CHAT_ID"
            }
        }
        with open("config.json", "w") as f:
            json.dump(config, f, indent=4)
        print("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª config.json. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏ –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞.")
    else:
        bot = MangaReader()
        bot.run()
